[
{
	"uri": "https://piklist.github.io/Piklist-Documentation/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Welcome to the Piklist Documentation Home of the documentation that\u0026rsquo;s so good it will make you cry.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/getting-started/built-in-demos/",
	"title": "Built-in Demos",
	"tags": [],
	"description": "",
	"content": " Description Piklist allows you to work with WordPress like never before. At its basic level, you can easily create metaboxes/metafields (also known as custom fields) for Posts, Pages, media and user profiles, as well as easy Settings pages, Widgets and Dashboard Widgets. You will need to write a little bit of code to use Piklist, but it’s minimal and we’ve included lots of examples. Let’s get started!\n Install Piklist like you would any other Plugin. Once installed, activate Piklist. You will see a Piklist item in your WordPress menu. Now you can start adding power to your theme and plugins. Check out our tutorials for a detailed overview.  Included Demos You can get a good overview of what Piklist is capable of by activating the included “Piklist Demos” add-on:\n Hover over the “Piklist” menu item, and then click on “Settings”. You should now see options for Settings. Under the Add-ons tab is the “Extend Piklist” area containing the “Piklist Demos” add-on. Click on “Activate”, and then on “Save Changes”.  You will now have access to the Piklist Demos:  Custom Post Type and Settings: Go to Piklist Demos \u0026gt; Add New. Create a new demo here and it will show up under Piklist Demos.\nSample Widgets: Go to Appearance \u0026gt; Widgets \u0026gt; Piklist Demo Widgets.\nUsage Piklist checker is designed to be easy to include in your plugin.\nInclude the Piklist Checker file in your Piklist plugin or theme. You can always get the most up-to-date version of Piklist Checker at WordPress.org.\nPlugin Add the following to your plugin. Notice the checker code is wrapped in a function that hooks to the init action. \nTheme If you’re using Piklist in your theme, this code should go in the functions.php file. Notice the added parameter after __FILE__: \nExample You can find an example of implementing the Piklist Checker in the WordPress Helpers plugin.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/parameters/comment-block/",
	"title": "Comment Block Parameters",
	"tags": [],
	"description": "",
	"content": " Parameters action  Input: string Returns: string  align  Input: string Returns: string  anchor_id  Input: string Returns: string  capability User capability that can view this group of fields. This is not the “minimum” capability, this is the actual capability. Do not include if you wish to allow all users to view. ** Do not use with “role”. Use one or the other\n Input: comma-delimited Returns: array Default: Whatever is set in register post type Examples:  Capability: edit_posts Capability: edit_posts, edit_others_posts  "
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/admin-notices/",
	"title": "Creating an Admin Notice",
	"tags": [],
	"description": "",
	"content": " Description Creating Admin Notices with Piklist is very easy, and can be done without writing any PHP.\nDecide whether you are going to include your notice in a plugin or theme. Create a notices/ folder in your parts/ folder (e.g. /parts/notices/). Now, create a php file in your notices folder. This file will hold your notice code. At the top of the file, add the following comment block which tells Piklist this is an “updated” type notice, and can be dismissible by the user.\n\u0026lt;?php /* Notice Type: updated Dismiss: true */ ?\u0026gt; \u0026lt;p\u0026gt;This is my notice\u0026lt;/p\u0026gt;  You can find a full list of available parameters for notices here.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/faq/",
	"title": "FAQs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/getting-started/folder-structure/",
	"title": "Folder Structure",
	"tags": [],
	"description": "",
	"content": " Description When creating fields, forms, widgets, etc., with Piklist, you place your code a file that is located in the proper folder. For example, when creating widgets, your code would go in the /widgets/ folder.\nPiklist has a predefined folder structure which it scans for your code.\nTheme folder structure /theme-folder /piklist /parts /admin-pages (Do not use for settings pages) /dashboard /forms /help /media /meta-boxes /notices /pointers /settings /shortcodes /terms /updates /users /widgets /workflows  Plugin folder structure /plugin-folder /parts /admin-pages (Do not use for settings pages) /dashboard /forms /help /media /meta-boxes /notices /pointers /settings /shortcodes /terms /updates /users /widgets /workflows  IMPORTANT If you are writing a Piklist plugin, make sure you register it with Piklist.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " Description To get the most out of this tutorial you should have a recent version of WordPress running and the Piklist plugin installed and activated. If you are not running WordPress locally, then you will need FTP access to your site so you can upload files.\nWhat is Piklist? At it’s very basic level, Piklist is a rapid development framework for WordPress. When using Piklist to build your WordPress themes or plugins, you will be able to build more powerful, flexible websites with less code.\nYou install and activate Piklist like any other WordPress plugin. It is absolutely free. Built-in demos are included, so you can see some of the features of Piklist in action.\nPiklist is a code-based framework, which means it has no user interface. We believe this is one of the biggest benefits to using Piklist. Code based systems allow you flexibility in your field configurations and development, and will save you time in the long run. With Piklist you can usually use the same code you have written in one section and use it in another, allowing you to copy and paste, and save tons of time.\nWe’ve worked hard to make Piklist easy to use for beginners, and powerful enough for developers… and our users all agree!\nAbout this Tutorial Piklist is an incredibly powerful framework for WordPress. This tutorial only covers one feature of Piklist… adding custom fields. There is a lot more that Piklist can do, so check out the rest of the User Guide [TODO: ADD LINK] when you’ve finished this tutorial.\nLet’s get started!\nYou can easily create your project in a new or existing plugin, or your theme. In this tutorial we’ll create the project in your theme.\nPiklist Folder Structure To help keep your code organized, Piklist uses a pre-defined folder/file structure that makes it easy for you to add functionality to your site.\nPiklist utilizes a folder for each major section of WordPress. You create these folders in your theme or plugin and place the appropriate files in them. Piklist will automatically load these files correctly.\nFolder Structure for your theme If you want to use your theme for your Piklist files, open your theme’s main folder and add a folder called “piklist”. Inside that folder add another called “parts” and then add any Piklist folders you will need. Your folder structure should look like this:\n/theme-folder /piklist /parts /admin-pages (Do not use for settings pages) /dashboard /help /media /meta-boxes /notices /pointers /settings /terms /updates /users /widgets /workflows  Folder Structure for your plugin You can also create a Piklist plugin if you want. The folder structure is slightly different than the one for a theme. Open your plugin’s main folder and add a “parts” folder. In that folder add any folders you will need. Your folder structure should look like this:\n/plugin-folder /parts /admin-pages (Do not use for settings pages) /dashboard /help /media /meta-boxes /notices /pointers /settings /terms /updates /users /widgets /workflows  When creating a plugin you need let Piklist know this plugin depends on it. In the comment block of your main plugin file, you need to add: Plugin Type: Piklist. So your comment block should look something like this:\n/* Plugin Name: Name Of The Plugin Plugin URI: http://URI_Of_Page_Describing_Plugin_and_Updates Description: A brief description of the Plugin. Version: The Plugin's Version Number, e.g.: 1.0 Author: Name Of The Plugin Author Author URI: http://URI_Of_The_Plugin_Author Plugin Type: Piklist */  A more detailed doc on writing Piklist plugins can be found here \u0026gt; [TODO: ADD LINK]\nGrouping fields Overview Now that we have our folder structure set up, it’s time to add some files. Each file you add to a parts folder will contain your fields. These files allow you to group fields together and you can also have multiple files in each parts folder. For example, each file in the “meta-boxes” folder will create a metabox for a Post Type. Each file in the “users” folder will create a user field section. Each file in the “widgets” folder will create a Widget (yes, you can easily create widgets with Piklist). [TODO: ADD LINK]\nComment blocks Configuration options for each field group are defined in the comment block at the top of each file. These comment blocks are similar to what WordPress uses for plugin headers. They allow you to easily configure a group of fields with no hooks or filters.\nCreate a new file in your “meta-boxes” folder called my-fields.php. At the top of the file, add this comment block:\n\u0026lt;?php /* Title: My custom fields Post Type: post */ ?\u0026gt;  In this comment block you just defined two configuration parameters: Title: The title of your metabox. Post Type: Which post type(s) should display this metabox.\nSave the file. Now open WordPress and go to “Add new Post”. You should see an empty metabox with the title “My custom fields”. You just created your first metabox with Piklist!\nConfiguration Options The comment block at the top of each parts file defines configuration options for a field group. Each field type (i.e. metaboxes, settings, widgets, etc) have different configuration options. Some configuration parameters can take multiple values. For example, the “Post Type” parameter can accept multiple Post Types separated by commas.\nChange the “Post Type” parameter to this: Post Type: post, page so your code will look like this:\n\u0026lt;?php /* Title: My custom fields Post Type: post, page */ ?\u0026gt;  Save the file. Open WordPress and add a new Page. You will see the same empty metabox that you added to Posts. Using this method you can easily use the same field code to multiple Post Types.\nAdding Fields Overview Piklist fields can be added almost anywhere in WordPress by using a very simple function. In most cases, the code you use to create a field in one area of WordPress can be used in all other areas as well. So, for example, if you already created a field for a Post Type and you also wanted to use it for a User Profile page, you can just copy and paste it.\nFields Now that we created our metabox, it’s time to add some fields. Under the comment block add the following field code so your file looks like this:\n\u0026lt;?php /* Title: My custom fields Post Type: post, page */ piklist('field', array( 'type' =\u0026gt; 'text' ,'field' =\u0026gt; 'field_one' ,'label' =\u0026gt; 'First Field' ));  The piklist(\u0026lsquo;field\u0026rsquo;) function accepts tons of parameters[TODO: ADD LINK]. This example used just three:\ntype: The type of field. In this case “text”.\nfield: The name of the field. This is where the field data will be saved in the database.\nlabel: A label that displays next to the field.\nSave the file. Go back to WordPress and add a new Post or a new Page. You will see a text field with the label “First Field” in your metabox.\nAdd more fields Now go back to your file, copy the field code (not the comment block), and paste it under the first field. Change the type to colorpicker, the field parameter to ‘field_two’, and the label to ‘Second field’. Your file should now look like this:\n\u0026lt;?php /* Title: My custom fields Post Type: post, page */ piklist('field', array( 'type' =\u0026gt; 'text' ,'field' =\u0026gt; 'field_one' ,'label' =\u0026gt; 'First Field' )); piklist('field', array( 'type' =\u0026gt; 'colorpicker' ,'field' =\u0026gt; 'field_two' ,'label' =\u0026gt; 'Second Field' ));  Save the file. Go back to WordPress and add a new Post or Page. You now have two fields: a text box and a colorpicker.\nClick inside the field and a color palette will pop up. You just created a colorpicker field by copying your existing text field code and making a few small changes.\nUtilizing the same code everywhere. As mentioned in the Tutorial introduction, one of the biggest benefits of Piklist is that it’s a code-based framework. You can easily copy and paste your code from one object type to another.\nCopy and Paste programming In the “users” folder you created in step 3, create a new file. Now open the file in your “meta-boxes” folder, select everything and copy. Open the file in your users folder and paste. The file in your “users” folder should be an exact duplicate of the one that’s in your “meta-boxes” folder.\nSince Users aren’t a Post Type, delete the line in your comment block that says: Post Type: post, page. Your file should look like this:\n\u0026lt;?php /* Title: My custom fields */ piklist('field', array( 'type' =\u0026gt; 'text' ,'field' =\u0026gt; 'field_one' ,'label' =\u0026gt; 'First Field' )); piklist('field', array( 'type' =\u0026gt; 'colorpicker' ,'field' =\u0026gt; 'field_two' ,'label' =\u0026gt; 'Second Field' ));  Press save. Open WordPress and edit any users profile. You will see this field under the section “My custom fields”.\nYou just utilized the same code for a User Profile, that you wrote for a Post Type. This is a huge time saver and you will find this feature invaluable.\nBuilt-in Demos Now that you understand how easy it is to create fields with Piklist, we’re sure you’re excited to get started. To help you along, Piklist comes with built-in demos that contain tons of field configurations that you can easily copy and paste into your own project. You can learn more about Piklist Demos here. [TODO ADD LINK]\nVideo Overview The initial public unveiling of Piklist at WordCampNYC 2012.   "
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/faq/how-to-include-piklist-in-plugin-or-theme/",
	"title": "How do I include Piklist in my plugin or theme?",
	"tags": [],
	"description": "",
	"content": " Description While we understand why you may want to include Piklist in your plugin or theme, we believe it may negatively impact your users’ experience. Piklist is not a boilerplate framework and is always designed to be a standalone plugin. Piklist will not work properly if included in another plugin or theme.\nIf the user does install Piklist as a separate plugin, AND your plugin/theme, it invites multiple conflicts, including different versions of Piklist. This can cause your plugin, or other plugins/themes that rely on Piklist, not to work properly. In addition, you become solely responsible for keeping your code updated with the latest version of Piklist, instead of letting the user upgrade normally.\nAdditionally, if you plan on submitting your code to WordPress.org, they do not accept a plugin that includes an entire other plugin, inside it.\nTo make it easier for you to build your plugin on Piklist, we have created the Piklist Checker. By including the Checker in your plugin, your users will be notified if Piklist is not installed, and they will be walked through the installation.\nWe hope you agree that keeping Piklist as a separate plugin makes sense for both you and your users. If not, there are other frameworks you can choose from that are designed to be included in plugins and themes.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/parameters/",
	"title": "Parameters",
	"tags": [],
	"description": "",
	"content": " Description "
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/faq/parse-error-syntax-error-unexpected-t_function/",
	"title": "Parse error: syntax error, unexpected T_FUNCTION",
	"tags": [],
	"description": "",
	"content": " Description If you’re getting this error, you are running an older version of PHP on your server.\nPiklist, like WordPress, recommends PHP v5.6 or higher.\nPlease contact your host and ask them to upgrade you.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/getting-started/piklist-checker/",
	"title": "Piklist checker",
	"tags": [],
	"description": "",
	"content": " Description Use the Piklist checker when creating plugins that require Piklist. The Piklist Checker makes it easy for you to notify users from your plugin when Piklist is not active. Since your plugin requires Piklist, not having Piklist installed and activated would provide an unpleasant user experience. Piklist Checker is designed to alleviate that.\nIf the user attempts to activate a Piklist plugin, without activating Piklist first, they will get a message notifying them the plugin was deactivated and instructions on how to get Piklist.\nUsage Piklist checker is designed to be easy to include in your plugin.\nInclude the Piklist Checker file in your Piklist plugin or theme. You can always get the most up-to-date version of Piklist Checker at WordPress.org.\nPlugin Add the following to your plugin. Notice the checker code is wrapped in a function that hooks to the init action. \nTheme If you’re using Piklist in your theme, this code should go in the functions.php file. Notice the added parameter after __FILE__: \nExample You can find an example of implementing the Piklist Checker in the WordPress Helpers plugin.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/getting-started/piklist-enable-your-theme/",
	"title": "Piklist enable your theme",
	"tags": [],
	"description": "",
	"content": " Description Adding Piklist meta-boxes, fields, settings pages, Widgets, etc. to your theme is very easy.\n First you need to add the proper folder structure to your theme. Piklist works by searching the active theme for the /piklist folder and then processing the sub-folders and files within it.\n Most Piklist code will go in the folder structure you set up. But other Piklist code, like registering Post Types, would go in your theme’s functions.php file.\n  IMPORTANT You cannot include the Piklist plugin in your theme. It needs to remain a separate plugin.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/faq/what-is-piklist/",
	"title": "What is Piklist?",
	"tags": [],
	"description": "",
	"content": " Description Piklist is an incredibly powerful framework for WordPress. When using Piklist to enhance your WordPress themes or plugins, you will be able to build more powerful, flexible websites with less code. Just install Piklist as you would a normal WordPress plugin, and then start writing code in your theme or plugin. This website should help you get started and provide a quick reference.\nMost people use Piklist to add fields in the WordPress admin area, but you can do a lot more with Piklist. Check out the main Piklist help section to learn more.\nPiklist is a code-based framework, which means it has no user interface. We believe this is one of the biggest benefits to using Piklist. Code based systems allow you flexibility in your field configurations and development, and will save you time in the long run. With Piklist you can usually use the same code you have written in one section and use it in another, allowing you to copy and paste, and save tons of time.\nWe’ve worked hard to make Piklist easy to use for beginners, and powerful enough for developers… and our users all agree!\nThere’s jQuery-for-Javascript and Rails-for-Ruby. Now there is Piklist-for-WordPress.\n"
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/faq/fields-not-saving/",
	"title": "Why aren’t my fields saving? ",
	"tags": [],
	"description": "",
	"content": " Description The most common reason for fields not saving is because a post type uses the default WordPress “custom fields” meta box. This meta box actually duplicates the inputs used by your fields.\nIf you are registering a post type, make sure custom-fields is not in the “supports” array.\nTo remove the custom-fields meta box from a WordPress default post type, or one that is registered by another plugin, use remove_post_type_support().\nThis code should go in your theme\u0026rsquo;s functions.php file, or your plugin file.\n "
},
{
	"uri": "https://piklist.github.io/Piklist-Documentation/getting-started/writing-a-plugin-for-piklist/",
	"title": "Writing a plugin for Piklist",
	"tags": [],
	"description": "",
	"content": " Description Writing a plugin to take advantage of Piklist is very simple. The only additional step is registering your plugin with Piklist, otherwise, this is just like writing a regular WordPress plugin. Like all plugins, Piklist plugins also live in your wp-content/plugins/ folder.\nRegistering your plugin with Piklist When writing WordPress plugins that rely on other plugins, you usually have to use hooks and filters… but not with Piklist. We’ve simplified the process for you.\n First create a folder to hold your plugin. The folder name can be anything you want… this is the same as any other plugin you would write.\n Then create your main plugin file, and make sure it’s the same name as your folder. So if your plugin is in the folder /my-cool-plugin/, then the main file should be named my-cool-plugin.php, as suggested on WordPress.org.\n Now, add the standard WordPress file headers to the top… this is also the same as any other plugin you would write.\n Now, here’s how you tell Piklist your plugin exists. Add one more line to the file header you just created: Plugin Type: Piklist. That’s it! Your new plugin header would look something like this:\n\u0026lt;?php /* Plugin Name: Name Of The Plugin Plugin URI: http://URI_Of_Page_Describing_Plugin_and_Updates Description: A brief description of the Plugin. Version: The Plugin's Version Number, e.g.: 1.0 Author: Name Of The Plugin Author Author URI: http://URI_Of_The_Plugin_Author Plugin Type: Piklist License: A \u0026quot;Slug\u0026quot; license name e.g. GPL2 */ ?\u0026gt;  As long as you have Piklist activated on your site, this plugin will now run properly.\n  Now you just need to create the proper folder structure so you can start creating fields and more.\nCreating plugins has never been easier!\nAdding your plugin to WordPress.org Let your users know Piklist is powering your plugin:\n Add a “Powered by Piklist” logo to your plugin banner. You can download it here \u0026gt;\n Add “Piklist” as a tag in your readme.txt file.\n Add the following information to your readme.txt file. This code is formatted for markup, which WordPress.org uses to parse your readme.txt file. The spaces after the second line are intentional and create a line break.\n  \u0026gt; #### Powered by Piklist \u0026gt; WordPress Helpers requires the Piklist framework. \u0026gt; \u0026lt;a href=\u0026quot;http://wordpress.org/extend/plugins/piklist/\u0026quot;\u0026gt;You can download and install Piklist for free.\u0026lt;/a\u0026gt;  "
}]