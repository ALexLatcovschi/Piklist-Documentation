<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Piklist Documentation</title>
    <link>https://piklist.github.io/Piklist-Documentation/</link>
    <description>Recent content on Piklist Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://piklist.github.io/Piklist-Documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sanitizing Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/sanitizing-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/sanitizing-fields/</guid>
      <description>When writing field code, whether with Piklist or not, you should be extra cautious of how you handle data coming into WordPress and how it’s presented to the end user. Piklist makes sanitizing your data easy with the sanitize parameter.
Choose the appropriate type of sanitization for each of your fields.
email Strips out all characters that are not allowable in an email address.
Codex reference for parameters: sanitize_email
&#39;sanitize&#39; =&amp;gt; array( array( &#39;type&#39; =&amp;gt; &#39;email&#39; ) )  file_name Removes special characters that are illegal in filenames on certain operating systems and special characters requiring special escaping to manipulate at the command line.</description>
    </item>
    
    <item>
      <title>Create your own field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/create-your-own-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/create-your-own-fields/</guid>
      <description>With Piklist, you can easily create your own fields to use in your projects.
 To start, you should have a /parts folder in your theme or plugin to put Piklist parts files. Add a subfolder called /fields/. The structure should look like /parts/fields/. Create a file in the /fields/ folder. Any files in this folder can become fields automatically registered with Piklist. The name of your file is important since it will become the name of your field.</description>
    </item>
    
    <item>
      <title>Add Subtitle field to the Post screen</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-subtitle-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-subtitle-field/</guid>
      <description>The Piklist folder structure makes it very easy to create Meta-Boxes, Settings Sections, etc, with limited code. Sometimes, however, you may need to insert a field in a specific place. Usually this is tied to a WordPress hook.
The Piklist field function, can be used outside the Piklist folder structure, and placed inside a standard function.
For this tutorial, we will insert a “Subtitle” field, under the Post Title field. A few things:</description>
    </item>
    
    <item>
      <title>Add WYSISYG to your Excerpt Box</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-wysisyg-excerpt-box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-wysisyg-excerpt-box/</guid>
      <description>Description To add some style to your excerpts, you can easily add a WYSIWYG editor to your excerpt box.
First, remove the default excerpt box Custom post type
If you’re registering your own post type, include the supports parameter but don’t include excerpt in the array. This will tell WordPress not to render the excerpt box.
Built in post type
Use the standard WordPress function remove_post_type_support, to remove the editor.</description>
    </item>
    
    <item>
      <title>Built-in Demos</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/built-in-demos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/built-in-demos/</guid>
      <description>Piklist allows you to work with WordPress like never before. At its basic level, you can easily create metaboxes/metafields (also known as custom fields) for Posts, Pages, media and user profiles, as well as easy Settings pages, Widgets and Dashboard Widgets. You will need to write a little bit of code to use Piklist, but it’s minimal and we’ve included lots of examples. Let’s get started!
 Install Piklist like you would any other Plugin.</description>
    </item>
    
    <item>
      <title>Checkbox Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/checkbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/checkbox/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;checkbox&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;checkbox&#39;, &#39;field&#39; =&amp;gt; &#39;checkbox&#39;, &#39;label&#39; =&amp;gt; &#39;Checkbox&#39;, &#39;value&#39; =&amp;gt; &#39;third&#39;, // set default value &#39;choices&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; &#39;First Choice&#39;, ,&#39;second&#39; =&amp;gt; &#39;Second Choice&#39;, ,&#39;third&#39; =&amp;gt; &#39;Third Choice&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Colorpicker Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/colorpicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/colorpicker/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;colorpicker&#39; Create a WordPress colorpicker field.
You can use Piklist field parameters to customize this field.
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;colorpicker&#39;, &#39;field&#39; =&amp;gt; &#39;my_color&#39;, &#39;label&#39; =&amp;gt; &#39;Color Picker&#39; ));  </description>
    </item>
    
    <item>
      <title>Conditionally Show Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/fields/conditionally-show-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/fields/conditionally-show-fields/</guid>
      <description>Description Piklist makes it easy to show one or more fields, based on the value of another field, and so much more. The Piklist conditions parameter is very powerful, and you can see all the options in the documentation.
In this tutorial, if the user clicks on the “Yes” radio button to subscribe to our newsletter, we will show an “Email” text field.
 Conditional fields work on almost every page in WordPress.</description>
    </item>
    
    <item>
      <title>Creating Metaboxes and Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/meta-boxes-creating-metaboxes-and-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/meta-boxes-creating-metaboxes-and-fields/</guid>
      <description>Description Piklist makes it radically easy to add metaboxes and fields to your posts, pages or custom post types. In this tutorial, we will create a metabox that includes three fields, select, text and ColorPicker, for standard posts.
The first step is to create the proper folder structure in your theme. Create a piklist folder, and then a parts subfolder, and then add a meta-boxes subfolder. (Be sure to include the dash.</description>
    </item>
    
    <item>
      <title>Datepicker Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/datepicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/datepicker/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;datepicker&#39; Create a jQuery datepicker field.
This field uses the standard jQuery DatePicker field, and respects the same options. Just define them in the Piklist options array. See examples below.
You can use Piklist field parameters to customize this field.
Basic Datepicker field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;datepicker&#39;, &#39;field&#39; =&amp;gt; &#39;my_date_field&#39;, &#39;label&#39; =&amp;gt; &#39;Date&#39;, &#39;value&#39; =&amp;gt; date(&#39;M d, Y&#39;, time() + 604800), // set default value &#39;options&#39; =&amp;gt; array( &#39;dateFormat&#39; =&amp;gt; &#39;M d, yy&#39; ) ));  Localizing the Datepicker field</description>
    </item>
    
    <item>
      <title>Display Menus as a Radio, Checkbox or Select list</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/fields/display-menus-radio-checkbox-select-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/fields/display-menus-radio-checkbox-select-list/</guid>
      <description>Description Using Piklist you can easily display your Menus as Radio, Checkboxes or a Select list (dropdowns). Easily include them in custom theme settings, or when creating posts. This simple tutorial will show you how.
 Install Piklist Decide if you are going to build your Piklist code as a plugin or in your theme. With Piklist you can display fields as Metaboxes, on a Settings page or a Widget.</description>
    </item>
    
    <item>
      <title>Editor Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/editor/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;editor&#39; Create a standard WordPress editor field.
You can use Piklist field parameters to customize this field.
Custom Parameters The editor field takes any option that can be passed to the WordPress wp_editor() function. You can pass them through the options array. See examples below.
Examples Basic Editor Field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;editor&#39;, &#39;field&#39; =&amp;gt; &#39;my_editor_field&#39;, &#39;label&#39; =&amp;gt; &#39;Post Content&#39; ));  Default Editor
Piklist can replace the default editor in WordPress by using code the following code.</description>
    </item>
    
    <item>
      <title>Field Parameters</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/field-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/field-parameters/</guid>
      <description>This is a full list of available parameters for Piklist fields.
on_post_status </description>
    </item>
    
    <item>
      <title>File (upload) Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/file/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;file&#39; Create a file upload field. Uses either the WordPress media uploader, or a basic uploader.
Custom Parameters The file field takes the following custom parameters. Include them within the options array.
basic
Piklist allows for two different file upload fields in the WordPress admin, a Basic uploader and the standard Media uploader. To use the Media uploader, do not set this parameter at all.
NOTES:
 The basic uploader is not supported in Widgets.</description>
    </item>
    
    <item>
      <title>Folder Structure</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/folder-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/folder-structure/</guid>
      <description>When creating fields, forms, widgets, etc., with Piklist, you place your code a file that is located in the proper folder. For example, when creating widgets, your code would go in the /widgets/ folder.
Piklist has a predefined folder structure which it scans for your code.
Theme folder structure /theme-folder /piklist /parts /admin-pages (Do not use for settings pages) /dashboard /forms /help /media /meta-boxes /notices /pointers /settings /shortcodes /terms /updates /users /widgets /workflows  Plugin folder structure /plugin-folder /parts /admin-pages (Do not use for settings pages) /dashboard /forms /help /media /meta-boxes /notices /pointers /settings /shortcodes /terms /updates /users /widgets /workflows  IMPORTANT If you are writing a Piklist plugin, make sure you register it with Piklist.</description>
    </item>
    
    <item>
      <title>Group Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/group/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;group&#39; Adds a group of fields.
If field parameter is set, a serialized array is created of the field group, otherwise they will be saved as individual meta. Individual meta can easily be searched. The columns field parameter is especially helpful in Field Groups for more complex layouts like address blocks.
Examples piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;group&#39; ,&#39;field&#39; =&amp;gt; &#39;address_group&#39; ,&#39;label&#39; =&amp;gt; __(&#39;Address (Grouped)&#39;, &#39;piklist-demo&#39;) ,&#39;list&#39; =&amp;gt; false ,&#39;description&#39; =&amp;gt; __(&#39;A grouped field with the field parameter set.</description>
    </item>
    
    <item>
      <title>HTML Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/html/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;html&#39; The Piklist html field, allows you to render standard HTML markup and keep the same label/field format as the rest of your fields.
You can use Piklist field parameters to customize this field.
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;html&#39;, ,&#39;label&#39; =&amp;gt; &#39;HTML Field&#39;, ,&#39;value&#39; =&amp;gt; &#39;&amp;lt;strong&amp;gt;This is some html&amp;lt;/strong&amp;gt;&#39; ));  </description>
    </item>
    
    <item>
      <title>HTML5 Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/html5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/html5/</guid>
      <description> Piklist supports the following HTML 5 fields:
 color date datetime datetime-local email month range search tel time url week number  You can use Piklist field parameters to customize these fields.
Example piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;email&#39;, &#39;field&#39; =&amp;gt; &#39;my_html5_email&#39;, &#39;label&#39; =&amp;gt; &#39;Enter your email address&#39;, &#39;attributes&#39; =&amp;gt; array( // Pass HTML5 attributes in the attributes array &#39;required&#39; =&amp;gt; &#39;required&#39;, &#39;placeholder&#39; =&amp;gt; &#39;Enter email address&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Hidden Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/hidden/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;hidden&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;hidden&#39;, &#39;field&#39; =&amp;gt; &#39;post_id&#39;, &#39;value&#39; =&amp;gt; $post-&amp;gt;ID // set the value of this hidden field to the Post ID. ));  </description>
    </item>
    
    <item>
      <title>How do I include Piklist in my plugin or theme?</title>
      <link>https://piklist.github.io/Piklist-Documentation/faq/how-to-include-piklist-in-plugin-or-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/faq/how-to-include-piklist-in-plugin-or-theme/</guid>
      <description>While we understand why you may want to include Piklist in your plugin or theme, we believe it may negatively impact your users’ experience. Piklist is not a boilerplate framework and is always designed to be a standalone plugin. Piklist will not work properly if included in another plugin or theme.
If the user does install Piklist as a separate plugin, AND your plugin/theme, it invites multiple conflicts, including different versions of Piklist.</description>
    </item>
    
    <item>
      <title>Lock Field Values based on Post Status</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/lock-field-values-based-post-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/lock-field-values-based-post-status/</guid>
      <description>Description Piklist allows you to lock a field value (making it read-only), when the post status changes. A perfect example of this is if you want to lock post meta once a post is published.
Here’s how we do that:
If you are already using Piklist, then skip to step 4.
Install Piklist
Decide if you are going to build your Piklist code as a plugin or in your theme.</description>
    </item>
    
    <item>
      <title>Parse error: syntax error, unexpected T_FUNCTION</title>
      <link>https://piklist.github.io/Piklist-Documentation/faq/parse-error-syntax-error-unexpected-t_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/faq/parse-error-syntax-error-unexpected-t_function/</guid>
      <description>If you’re getting this error, you are running an older version of PHP on your server.
Piklist, like WordPress, recommends PHP v5.6 or higher.
Please contact your host and ask them to upgrade you.</description>
    </item>
    
    <item>
      <title>Piklist checker</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-checker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-checker/</guid>
      <description>Use the Piklist checker when creating plugins that require Piklist. The Piklist Checker makes it easy for you to notify users from your plugin when Piklist is not active. Since your plugin requires Piklist, not having Piklist installed and activated would provide an unpleasant user experience. Piklist Checker is designed to alleviate that.
If the user attempts to activate a Piklist plugin, without activating Piklist first, they will get a message notifying them the plugin was deactivated and instructions on how to get Piklist.</description>
    </item>
    
    <item>
      <title>Piklist enable your theme</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-enable-your-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-enable-your-theme/</guid>
      <description>Adding Piklist meta-boxes, fields, settings pages, Widgets, etc. to your theme is very easy.
 First you need to add the proper folder structure to your theme. Piklist works by searching the active theme for the /piklist folder and then processing the sub-folders and files within it.
 Most Piklist code will go in the folder structure you set up. But other Piklist code, like registering Post Types, would go in your theme’s functions.</description>
    </item>
    
    <item>
      <title>Radio Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/radio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/radio/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;radio&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;radio&#39;, &#39;field&#39; =&amp;gt; &#39;my_radio&#39;, &#39;label&#39; =&amp;gt; &#39;Radio&#39;, &#39;choices&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; &#39;First Choice&#39;, ,&#39;second&#39; =&amp;gt; &#39;Second Choice&#39;, ,&#39;third&#39; =&amp;gt; &#39;Third Choice&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Select Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/select/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;select&#39; Basic Select Field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;select&#39;, &#39;field&#39; =&amp;gt; &#39;my_select&#39;, &#39;label&#39; =&amp;gt; &#39;My select&#39;, &#39;choices&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; &#39;First Choice&#39;, &#39;second&#39; =&amp;gt; &#39;Second Choice&#39;, &#39;third&#39; =&amp;gt; &#39;Third Choice&#39; ) ));  Select Field with Optgroup
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;select&#39; ,&#39;field&#39; =&amp;gt; &#39;select_optgroup&#39; ,&#39;label&#39; =&amp;gt; __(&#39;Select with Option Groups&#39;, &#39;piklist-demo&#39;) ,&#39;value&#39; =&amp;gt; &#39;third&#39; ,&#39;choices&#39; =&amp;gt; array( &#39;Group 1&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; __(&#39;First Choice&#39;, &#39;piklist-demo&#39;) ,&#39;second&#39; =&amp;gt; __(&#39;Second Choice&#39;, &#39;piklist-demo&#39;) ,&#39;third&#39; =&amp;gt; __(&#39;Third Choice&#39;, &#39;piklist-demo&#39;) ) ,&#39;Group 2&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; __(&#39;First Choice&#39;, &#39;piklist-demo&#39;) ,&#39;second&#39; =&amp;gt; __(&#39;Second Choice&#39;, &#39;piklist-demo&#39;) ,&#39;third&#39; =&amp;gt; __(&#39;Third Choice&#39;, &#39;piklist-demo&#39;) ) ) ));  Multiselect</description>
    </item>
    
    <item>
      <title>Text Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/text/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;text&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;text&#39;, &#39;field&#39; =&amp;gt; &#39;my_text&#39;, &#39;label&#39; =&amp;gt; &#39;Text&#39;, &#39;attributes&#39; =&amp;gt; array( &#39;class&#39; =&amp;gt; &#39;regular-text&#39; // WordPress css class ) ));  </description>
    </item>
    
    <item>
      <title>Textarea Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/textarea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/textarea/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;textarea&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;textarea&#39;, &#39;field&#39; =&amp;gt; &#39;my_textarea&#39;, &#39;label&#39; =&amp;gt; &#39;Text Area&#39;, &#39;attributes&#39; =&amp;gt; array( &#39;rows&#39; =&amp;gt; 10, &#39;cols&#39; =&amp;gt; 50, &#39;class&#39; =&amp;gt; &#39;large-text&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Why aren’t my fields saving?</title>
      <link>https://piklist.github.io/Piklist-Documentation/faq/fields-not-saving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/faq/fields-not-saving/</guid>
      <description>The most common reason for fields not saving is because a post type uses the default WordPress “custom fields” meta box. This meta box actually duplicates the inputs used by your fields.
If you are registering a post type, make sure custom-fields is not in the “supports” array.
To remove the custom-fields meta box from a WordPress default post type, or one that is registered by another plugin, use remove_post_type_support().</description>
    </item>
    
    <item>
      <title>Writing a plugin for Piklist</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/writing-a-plugin-for-piklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/writing-a-plugin-for-piklist/</guid>
      <description>Writing a plugin to take advantage of Piklist is very simple. The only additional step is registering your plugin with Piklist, otherwise, this is just like writing a regular WordPress plugin. Like all plugins, Piklist plugins also live in your wp-content/plugins/ folder.
Registering your plugin with Piklist When writing WordPress plugins that rely on other plugins, you usually have to use hooks and filters… but not with Piklist. We’ve simplified the process for you.</description>
    </item>
    
  </channel>
</rss>