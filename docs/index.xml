<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Piklist Documentation</title>
    <link>https://piklist.github.io/Piklist-Documentation/</link>
    <description>Recent content on Piklist Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Dec 2017 12:37:06 -0800</lastBuildDate>
    
	<atom:link href="https://piklist.github.io/Piklist-Documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Your First Workflow</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/workflows/building-first-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/workflows/building-first-workflow/</guid>
      <description>Piklist Workflows allow you to add a tabbed system on almost any admin page. Additionally, you can add almost anything you want to each tab.
IMPORTANT: Each Workflow tab loads a separate page, with a new url. If you change tabs without saving you will lose your data.
ALSO IMPORTANT: Workflows control the ENTIRE page, not just what is located under the tabs.
Each Workflow needs a minimum of two files:</description>
    </item>
    
    <item>
      <title>Easy Widgets</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/widgets/easy-widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/widgets/easy-widgets/</guid>
      <description>Building widgets with Piklist is incredibly simple. You can use a fraction of the code WordPress requires to make very powerful widgets. In this tutorial, we will create a widget that includes three fields: select, text and ColorPicker.
 The first step is to create the proper folder structure in your theme. Create a piklist folder, and then a parts subfolder, and then add a widgets subfolder. You can see the supported Piklist folder structure here.</description>
    </item>
    
    <item>
      <title>Getting Started with Meta-boxes and Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/getting-started-creating-metaboxes-and-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/getting-started-creating-metaboxes-and-fields/</guid>
      <description>Description Piklist makes it radically easy to add metaboxes and fields to your posts, pages or custom post types. In this tutorial, we will create a metabox that includes three fields, select, text and ColorPicker, for standard posts.
The first step is to create the proper folder structure in your theme. Create a piklist folder, and then a parts subfolder, and then add a meta-boxes subfolder. (Be sure to include the dash.</description>
    </item>
    
    <item>
      <title>Getting Started with Taxonomies and Piklist</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/terms/getting-started-taxonomies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/terms/getting-started-taxonomies/</guid>
      <description>Whether you register a taxonomy via the standard WordPress function register_taxonomy, or through Piklist, you can still take advantage of many Piklist features. However, you can add some extra power to your Taxonomies by registering them the Piklist way. Piklist extends the register_taxonomy function with extra parameters to enable extra features. You can use the standard register_taxonomy parameters, plus additional ones defined by Piklist.
To register a Taxonomy with Piklist:</description>
    </item>
    
    <item>
      <title>Getting started with updates</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/updates/getting-started-with-updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/updates/getting-started-with-updates/</guid>
      <description>If your plugin needs an update procedure, Piklist makes it quite easy. First create a php file, and drop it in the updates folder. The file name should be the current version of your plugin. So, if the update procedure is for version 2.0 of your plugin, then the file name should be 2.0.php.
Then write your update procedure.
Example This example is pulled from Piklist itself.
 This update scripts runs if you are upgrading from Piklist version 0.</description>
    </item>
    
    <item>
      <title>Sanitizing Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/sanitizing-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/sanitizing-fields/</guid>
      <description>When writing field code, whether with Piklist or not, you should be extra cautious of how you handle data coming into WordPress and how it’s presented to the end user. Piklist makes sanitizing your data easy with the sanitize parameter.
Choose the appropriate type of sanitization for each of your fields.
email Strips out all characters that are not allowable in an email address.
Codex reference for parameters: sanitize_email
&#39;sanitize&#39; =&amp;gt; array( array( &#39;type&#39; =&amp;gt; &#39;email&#39; ) )  file_name Removes special characters that are illegal in filenames on certain operating systems and special characters requiring special escaping to manipulate at the command line.</description>
    </item>
    
    <item>
      <title>Create your own field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/create-your-own-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/create-your-own-fields/</guid>
      <description>With Piklist, you can easily create your own fields to use in your projects.
 To start, you should have a /parts folder in your theme or plugin to put Piklist parts files. Add a subfolder called /fields/. The structure should look like /parts/fields/. Create a file in the /fields/ folder. Any files in this folder can become fields automatically registered with Piklist. The name of your file is important since it will become the name of your field.</description>
    </item>
    
    <item>
      <title>Add Subtitle field to the Post screen</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-subtitle-field/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-subtitle-field/</guid>
      <description>The Piklist folder structure makes it very easy to create Meta-Boxes, Settings Sections, etc, with limited code. Sometimes, however, you may need to insert a field in a specific place. Usually this is tied to a WordPress hook.
The Piklist field function, can be used outside the Piklist folder structure, and placed inside a standard function.
For this tutorial, we will insert a “Subtitle” field, under the Post Title field. A few things:</description>
    </item>
    
    <item>
      <title>Add WYSISYG to your Excerpt Box</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-wysisyg-excerpt-box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/add-wysisyg-excerpt-box/</guid>
      <description>Description To add some style to your excerpts, you can easily add a WYSIWYG editor to your excerpt box.
First, remove the default excerpt box Custom post type
If you’re registering your own post type, include the supports parameter but don’t include excerpt in the array. This will tell WordPress not to render the excerpt box.
Built in post type
Use the standard WordPress function remove_post_type_support, to remove the editor.</description>
    </item>
    
    <item>
      <title>Admin Notices</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/admin-notices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/admin-notices/</guid>
      <description>/parts/notices/ Creating Admin Notices with Piklist is very easy, and can be done without writing any PHP.
 Decide whether you are going to include your notice in a plugin or theme. Create a notices/ folder in your parts/ folder (e.g. /parts/notices/). Now, create a php file in your notices folder. This file will hold your notice code. At the top of the file, add the following comment block which tells Piklist this is an “updated” type notice, and can be dismissible by the user.</description>
    </item>
    
    <item>
      <title>Admin Pages</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/admin-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/admin-pages/</guid>
      <description>/parts/admin-pages/ With Piklist you can easily create Admin pages to display HTML, embed shortcodes, insert a Piklist form, and create other types of pages.
You can create as many files as you like and place them in this folder. Each file will render one Admin page.
Configuration options are placed in a comment block at the top of your file.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Building Settings Pages</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/settings/building-settings-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/settings/building-settings-pages/</guid>
      <description>Creating WordPress Settings pages with Piklist is as easy as creating any other field type. First we register the Settings page, and then we start adding Settings sections. Piklist uses the standard WordPress settings API, plus it adds extra power and ease of use. You can use any Piklist field type on a Settings page, and easily add Tabs as well.
In this tutorial, we will create a Settings Page that includes three fields: select, text and colorPicker, with tooltip help.</description>
    </item>
    
    <item>
      <title>Built-in Demos</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/built-in-demos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/built-in-demos/</guid>
      <description>Piklist allows you to work with WordPress like never before. At its basic level, you can easily create metaboxes/metafields (also known as custom fields) for Posts, Pages, media and user profiles, as well as easy Settings pages, Widgets and Dashboard Widgets. You will need to write a little bit of code to use Piklist, but it’s minimal and we’ve included lots of examples. Let’s get started!
 Install Piklist like you would any other Plugin.</description>
    </item>
    
    <item>
      <title>Checkbox Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/checkbox/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/checkbox/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;checkbox&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;checkbox&#39;, &#39;field&#39; =&amp;gt; &#39;checkbox&#39;, &#39;label&#39; =&amp;gt; &#39;Checkbox&#39;, &#39;value&#39; =&amp;gt; &#39;third&#39;, // set default value &#39;choices&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; &#39;First Choice&#39;, ,&#39;second&#39; =&amp;gt; &#39;Second Choice&#39;, ,&#39;third&#39; =&amp;gt; &#39;Third Choice&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Colorpicker Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/colorpicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/colorpicker/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;colorpicker&#39; Create a WordPress colorpicker field.
You can use Piklist field parameters to customize this field.
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;colorpicker&#39;, &#39;field&#39; =&amp;gt; &#39;my_color&#39;, &#39;label&#39; =&amp;gt; &#39;Color Picker&#39; ));  </description>
    </item>
    
    <item>
      <title>Creating Custom Post Statuses</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/creating-custom-post-statuses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/creating-custom-post-statuses/</guid>
      <description>Custom Post Statuses are at the heart of any web application built with WordPress, and Piklist makes it easy for you to implement them. No longer are you stuck with draft, pending review and published. You can add whatever post statuses you choose.
A few important caveats:
 Due to the nature of WordPress, your first post status has to remain “draft”. You can change the label so it displays “New”, or “Howdy”, but the key in the post status array will have to remain draft (we’ll explain more later in the tutorial).</description>
    </item>
    
    <item>
      <title>Creating Separate Taxonomies for each User</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/terms/creating-separate-taxonomies-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/terms/creating-separate-taxonomies-user/</guid>
      <description>In this tutorial we’ll provide each logged in user with their own set of private tags.
First, you will need to create your taxonomy using the piklist_taxonomies filter.
We’ll assume you will be using a non-hierarchical(like Tags) taxonomy, and we will name them &amp;lsquo;personal_tags&amp;rsquo;. However, we will do something special with the name. To allow separate taxonomies for each logged in user, we will append their user ID to the end of the taxonomy name.</description>
    </item>
    
    <item>
      <title>Dashboard Widgets</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/dashboard-widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/dashboard-widgets/</guid>
      <description>/parts/dashboard/ With Piklist you can easily create Dashboard Widgets for a standard WordPress site or for Network Dashboards in multisite.
You can create as many files as you like and place them in this folder. Each file will render one Dashboard Widget.
Configuration options are placed in a comment block at the top of your file.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Datepicker Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/datepicker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/datepicker/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;datepicker&#39; Create a jQuery datepicker field.
This field uses the standard jQuery DatePicker field, and respects the same options. Just define them in the Piklist options array. See examples below.
You can use Piklist field parameters to customize this field.
Basic Datepicker field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;datepicker&#39;, &#39;field&#39; =&amp;gt; &#39;my_date_field&#39;, &#39;label&#39; =&amp;gt; &#39;Date&#39;, &#39;value&#39; =&amp;gt; date(&#39;M d, Y&#39;, time() + 604800), // set default value &#39;options&#39; =&amp;gt; array( &#39;dateFormat&#39; =&amp;gt; &#39;M d, yy&#39; ) ));  Localizing the Datepicker field</description>
    </item>
    
    <item>
      <title>Display Taxonomies as Radio, Checkboxes or Select list</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/terms/display-taxonomies-radio-checkboxes-select-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/terms/display-taxonomies-radio-checkboxes-select-list/</guid>
      <description>Using Piklist you can easily display your Taxonomies as Radio, Checkboxes or a Select list (dropdowns). This simple tutorial will show you how.
 Install Piklist Decide if you are going to build your Piklist code as a plugin or in your theme. With Piklist you can display fields as Metaboxes, on a Settings page or a Widget. Choose which one you want to use.  Now we can get started and write some code!</description>
    </item>
    
    <item>
      <title>Display Users as a Radio, Checkbox or Select list</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/users/display-users-radio-checkbox-select-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/users/display-users-radio-checkbox-select-list/</guid>
      <description>Using Piklist you can easily display your Users as Radio, Checkboxes or a Select list (dropdowns). This simple tutorial will show you how.
 Install Piklist Decide if you are going to build your Piklist code as a plugin or in your theme. With Piklist you can display fields as Meta-boxes, on a Settings page or a Widget. Choose which one you want to use.  Now we can get started and write some code!</description>
    </item>
    
    <item>
      <title>Editor Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/editor/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;editor&#39; Create a standard WordPress editor field.
You can use Piklist field parameters to customize this field.
Custom Parameters The editor field takes any option that can be passed to the WordPress wp_editor() function. You can pass them through the options array. See examples below.
Examples Basic Editor Field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;editor&#39;, &#39;field&#39; =&amp;gt; &#39;my_editor_field&#39;, &#39;label&#39; =&amp;gt; &#39;Post Content&#39; ));  Default Editor
Piklist can replace the default editor in WordPress by using code the following code.</description>
    </item>
    
    <item>
      <title>Field Parameters</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/field-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/field-parameters/</guid>
      <description>This is a full list of available parameters for Piklist fields.
add_more (repeater) Piklist allows you to turn ANY field, or group of fields, into a repeater field, by simple adding the add_more parameter.
Displaying Data To display the results of the Add-More in your theme, pull the data like you normally would. Add more’s save data as an array, so you can loop though the data to display.
 Input: boolean Default: false  Example: &#39;add_more&#39; =&amp;gt; true</description>
    </item>
    
    <item>
      <title>File (upload) Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/file/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;file&#39; Create a file upload field. Uses either the WordPress media uploader, or a basic uploader.
Custom Parameters The file field takes the following custom parameters. Include them within the options array.
basic
Piklist allows for two different file upload fields in the WordPress admin, a Basic uploader and the standard Media uploader. To use the Media uploader, do not set this parameter at all.
NOTES:
 The basic uploader is not supported in Widgets.</description>
    </item>
    
    <item>
      <title>Folder Structure</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/folder-structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/folder-structure/</guid>
      <description>When creating fields, forms, widgets, etc., with Piklist, you place your code a file that is located in the proper folder. For example, when creating widgets, your code would go in the /widgets/ folder.
Piklist has a predefined folder structure which it scans for your code.
Theme folder structure /theme-folder /piklist /parts /admin-pages (Do not use for settings pages) /dashboard /forms /help /media /meta-boxes /notices /pointers /settings /shortcodes /terms /updates /users /widgets /workflows  Plugin folder structure /plugin-folder /parts /admin-pages (Do not use for settings pages) /dashboard /forms /help /media /meta-boxes /notices /pointers /settings /shortcodes /terms /updates /users /widgets /workflows  IMPORTANT If you are writing a Piklist plugin, make sure you register it with Piklist.</description>
    </item>
    
    <item>
      <title>Forms</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/forms/</guid>
      <description>/parts/forms/ With Piklist you can easily create forms to use on the front of your site, or in the admin. You can create as many files as you like and place them in this folder. Each file will render one form.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Group Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/group/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;group&#39; Adds a group of fields.
If field parameter is set, a serialized array is created of the field group, otherwise they will be saved as individual meta. Individual meta can easily be searched. The columns field parameter is especially helpful in Field Groups for more complex layouts like address blocks.
Examples piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;group&#39; ,&#39;field&#39; =&amp;gt; &#39;address_group&#39; ,&#39;label&#39; =&amp;gt; __(&#39;Address (Grouped)&#39;, &#39;piklist-demo&#39;) ,&#39;list&#39; =&amp;gt; false ,&#39;description&#39; =&amp;gt; __(&#39;A grouped field with the field parameter set.</description>
    </item>
    
    <item>
      <title>Grouping child taxonomies by their parents</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/terms/grouping-child-taxonomies-parents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/terms/grouping-child-taxonomies-parents/</guid>
      <description>WordPress hierarchical taxonomies allow you to assign terms to a parent term. In this tutorial we’ll show you how to group the child terms under each parent, and make the parent unselectable, forcing the user to only select the children.
The basis of this tutorial is the flexibility of the Piklist field function, which we will place in a foreach loop.
This tutorial assumes you have already created a hierarchical taxonomy or you’re using the default WordPress Categories.</description>
    </item>
    
    <item>
      <title>HTML Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/html/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;html&#39; The Piklist html field, allows you to render standard HTML markup and keep the same label/field format as the rest of your fields.
You can use Piklist field parameters to customize this field.
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;html&#39;, ,&#39;label&#39; =&amp;gt; &#39;HTML Field&#39;, ,&#39;value&#39; =&amp;gt; &#39;&amp;lt;strong&amp;gt;This is some html&amp;lt;/strong&amp;gt;&#39; ));  </description>
    </item>
    
    <item>
      <title>HTML5 Fields</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/html5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/html5/</guid>
      <description> Piklist supports the following HTML 5 fields:
 color date datetime datetime-local email month range search tel time url week number  You can use Piklist field parameters to customize these fields.
Example piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;email&#39;, &#39;field&#39; =&amp;gt; &#39;my_html5_email&#39;, &#39;label&#39; =&amp;gt; &#39;Enter your email address&#39;, &#39;attributes&#39; =&amp;gt; array( // Pass HTML5 attributes in the attributes array &#39;required&#39; =&amp;gt; &#39;required&#39;, &#39;placeholder&#39; =&amp;gt; &#39;Enter email address&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Help</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/help/</guid>
      <description>/parts/help/ With Piklist you can easily create Contextual Help menus.
You can create as many files as you like and place them in this folder. Each file will render one Help Tab.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Hidden Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/hidden/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/hidden/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;hidden&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;hidden&#39;, &#39;field&#39; =&amp;gt; &#39;post_id&#39;, &#39;value&#39; =&amp;gt; $post-&amp;gt;ID // set the value of this hidden field to the Post ID. ));  </description>
    </item>
    
    <item>
      <title>Hide Meta Boxes for a Page Template</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/hide-meta-boxes-page-template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/hide-meta-boxes-page-template/</guid>
      <description>Using Piklist, you can easily hide some meta boxes when a certain page template is selected in WordPress. This tutorial will show you how using two Piklist filters: piklist_get_file_data and piklist_add_part.
All of the code in this tutorial will go in your theme’s functions.php file, or your main plugin file.
Add a custom parameter to the Piklist comment block. Pikist uses a number of parameters in the comment block to control access to a meta box.</description>
    </item>
    
    <item>
      <title>How do I include Piklist in my plugin or theme?</title>
      <link>https://piklist.github.io/Piklist-Documentation/faq/how-to-include-piklist-in-plugin-or-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/faq/how-to-include-piklist-in-plugin-or-theme/</guid>
      <description>While we understand why you may want to include Piklist in your plugin or theme, we believe it may negatively impact your users’ experience. Piklist is not a boilerplate framework and is always designed to be a standalone plugin. Piklist will not work properly if included in another plugin or theme.
If the user does install Piklist as a separate plugin, AND your plugin/theme, it invites multiple conflicts, including different versions of Piklist.</description>
    </item>
    
    <item>
      <title>Lock Field Values based on Post Status</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/lock-field-values-based-post-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/lock-field-values-based-post-status/</guid>
      <description>Description Piklist allows you to lock a field value (making it read-only), when the post status changes. A perfect example of this is if you want to lock post meta once a post is published.
Here’s how we do that:
If you are already using Piklist, then skip to step 4.
Install Piklist
Decide if you are going to build your Piklist code as a plugin or in your theme.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/media/</guid>
      <description>/parts/media/ With Piklist you can easily create Media meta-boxes in the admin. You can create as many files as you like and place them in this folder. Each file will render one meta-box.
Configuration options are placed in a comment block at the top of your file.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Meta-boxes</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/meta-boxes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/meta-boxes/</guid>
      <description>/parts/meta-boxes/ With Piklist you can easily create meta-boxes for any Post Types… built-in WordPress, Post Types you created, or Post Types another theme or plugin created.
You can create as many files as you like and place them in this folder. Each file will render one meta-box.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Parse error: syntax error, unexpected T_FUNCTION</title>
      <link>https://piklist.github.io/Piklist-Documentation/faq/parse-error-syntax-error-unexpected-t_function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/faq/parse-error-syntax-error-unexpected-t_function/</guid>
      <description>If you’re getting this error, you are running an older version of PHP on your server.
Piklist, like WordPress, recommends PHP v5.6 or higher.
Please contact your host and ask them to upgrade you.</description>
    </item>
    
    <item>
      <title>Piklist checker</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-checker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-checker/</guid>
      <description>Use the Piklist checker when creating plugins that require Piklist. The Piklist Checker makes it easy for you to notify users from your plugin when Piklist is not active. Since your plugin requires Piklist, not having Piklist installed and activated would provide an unpleasant user experience. Piklist Checker is designed to alleviate that.
If the user attempts to activate a Piklist plugin, without activating Piklist first, they will get a message notifying them the plugin was deactivated and instructions on how to get Piklist.</description>
    </item>
    
    <item>
      <title>Piklist enable your theme</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-enable-your-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/piklist-enable-your-theme/</guid>
      <description>Adding Piklist meta-boxes, fields, settings pages, Widgets, etc. to your theme is very easy.
 First you need to add the proper folder structure to your theme. Piklist works by searching the active theme for the /piklist folder and then processing the sub-folders and files within it.
 Most Piklist code will go in the folder structure you set up. But other Piklist code, like registering Post Types, would go in your theme’s functions.</description>
    </item>
    
    <item>
      <title>Placing &#34;Add New Post&#34; in a Workflow</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/workflows/placing-add-new-post-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/workflows/placing-add-new-post-workflow/</guid>
      <description>Piklist’s Workflow system is incredibly powerful. It allows you to divide a page into different tabs. In this tutorial, we’ll use the Workflows to divide the default WordPress add new Post page.
 Review the Workflows documentation page to get an idea how they work. For this tutorial, we will need to create one Workflow HEADER, and two Workflow TAB files. Additionally, we will need to write a quick function as well.</description>
    </item>
    
    <item>
      <title>Pointers</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/pointers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/pointers/</guid>
      <description>/parts/pointers/ With Piklist you can easily create Pointers.
You can create as many files as you like and place them in this folder. Each file will render one pointer. View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Radio Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/radio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/radio/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;radio&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;radio&#39;, &#39;field&#39; =&amp;gt; &#39;my_radio&#39;, &#39;label&#39; =&amp;gt; &#39;Radio&#39;, &#39;choices&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; &#39;First Choice&#39;, ,&#39;second&#39; =&amp;gt; &#39;Second Choice&#39;, ,&#39;third&#39; =&amp;gt; &#39;Third Choice&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Registering Post Types</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/registering-post-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/registering-post-types/</guid>
      <description>Piklist works well with existing Post Types… those created with the standard WordPress function register_post_type. However, you can add some extra power to your Post Types by registering them the Piklist way. Piklist extends the register_post_type function with extra parameters to enable extra features. You can use the standard `register_post_type()&amp;rsquo; parameters, plus the additional Piklist Custom Post Type parameters.
To learn more about registering Post Types with Piklist, please read about the piklist_post_types filter.</description>
    </item>
    
    <item>
      <title>Select Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/select/</guid>
      <description>&#39;type&#39; =&amp;gt; &#39;select&#39; Basic Select Field
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;select&#39;, &#39;field&#39; =&amp;gt; &#39;my_select&#39;, &#39;label&#39; =&amp;gt; &#39;My select&#39;, &#39;choices&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; &#39;First Choice&#39;, &#39;second&#39; =&amp;gt; &#39;Second Choice&#39;, &#39;third&#39; =&amp;gt; &#39;Third Choice&#39; ) ));  Select Field with Optgroup
piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;select&#39; ,&#39;field&#39; =&amp;gt; &#39;select_optgroup&#39; ,&#39;label&#39; =&amp;gt; __(&#39;Select with Option Groups&#39;, &#39;piklist-demo&#39;) ,&#39;value&#39; =&amp;gt; &#39;third&#39; ,&#39;choices&#39; =&amp;gt; array( &#39;Group 1&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; __(&#39;First Choice&#39;, &#39;piklist-demo&#39;) ,&#39;second&#39; =&amp;gt; __(&#39;Second Choice&#39;, &#39;piklist-demo&#39;) ,&#39;third&#39; =&amp;gt; __(&#39;Third Choice&#39;, &#39;piklist-demo&#39;) ) ,&#39;Group 2&#39; =&amp;gt; array( &#39;first&#39; =&amp;gt; __(&#39;First Choice&#39;, &#39;piklist-demo&#39;) ,&#39;second&#39; =&amp;gt; __(&#39;Second Choice&#39;, &#39;piklist-demo&#39;) ,&#39;third&#39; =&amp;gt; __(&#39;Third Choice&#39;, &#39;piklist-demo&#39;) ) ) ));  Multiselect</description>
    </item>
    
    <item>
      <title>Settings</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/settings/</guid>
      <description>/parts/settings/ A Settings Page is made up of Settings Sections. With Piklist you can easily create these sections.
You can create as many files as you like and place them in this folder. Each file will render one section.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/shortcodes/</guid>
      <description>/parts/shortcodes/ With Piklist you can easily create Shortcodes.
Shortcodes are made up of two files: * Form file * Output file
Form file Everything in this file will display a form in the admin. Piklist automatically creates a form for every shortcode you create with it.
The format of this file is: widgetname-form.php (i.e. example-form.php)
Output file Everything in this file will display on the frontend. It can be as simple as standard HTML or a MailChimp form.</description>
    </item>
    
    <item>
      <title>Show Fields by User Capability or Role</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/fields/show-fields-user-capability-role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/fields/show-fields-user-capability-role/</guid>
      <description>With web applications and powerful websites, there will be times you want to only show a metabox or metafield to a particular user role or capability. For an Order Management system you may want your customers to see certain fields, while your employees can see them all. Or maybe you want Administrators and Editors to be able to leave notes on a post that no one else can see. Well, Piklist makes it easy to do just that.</description>
    </item>
    
    <item>
      <title>Show Metaboxes and Fields by Post Status</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/show-metaboxes-fields-post-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/meta-boxes/show-metaboxes-fields-post-status/</guid>
      <description>With web applications and powerful websites, there will be times you want to only show a meta-box or metafield when a post is in a particular post status. This becomes extra powerful when paired with the Piklist capability parameter, which allows you to show/hide a field based on a user role or capability. For an Order Management system, you may want an order notes field hidden until the estimate becomes an order.</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/terms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/terms/</guid>
      <description>/parts/terms/ With Piklist you can easily create term meta sections.
You can create as many files as you like and place them in this folder. Each file will render one section.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Text Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/text/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;text&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;text&#39;, &#39;field&#39; =&amp;gt; &#39;my_text&#39;, &#39;label&#39; =&amp;gt; &#39;Text&#39;, &#39;attributes&#39; =&amp;gt; array( &#39;class&#39; =&amp;gt; &#39;regular-text&#39; // WordPress css class ) ));  </description>
    </item>
    
    <item>
      <title>Textarea Field</title>
      <link>https://piklist.github.io/Piklist-Documentation/fields/types/textarea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/fields/types/textarea/</guid>
      <description> &#39;type&#39; =&amp;gt; &#39;textarea&#39; piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;textarea&#39;, &#39;field&#39; =&amp;gt; &#39;my_textarea&#39;, &#39;label&#39; =&amp;gt; &#39;Text Area&#39;, &#39;attributes&#39; =&amp;gt; array( &#39;rows&#39; =&amp;gt; 10, &#39;cols&#39; =&amp;gt; 50, &#39;class&#39; =&amp;gt; &#39;large-text&#39; ) ));  </description>
    </item>
    
    <item>
      <title>Updates</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/updates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/updates/</guid>
      <description>/parts/updates/ If your plugin needs an update procedure, Piklist makes it quite easy. First create a php file, and drop it in the updates folder. The file name should be the current version of your plugin. So, if the update procedure is for version 2.0 of your plugin, then the file name should be 2.0.php.
Then write your update procedure.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Users</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/users/</guid>
      <description>/parts/users/ With Piklist you can easily create user meta sections.
You can create as many files as you like and place them in this folder. Each file will render one user meta section.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Why aren’t my fields saving?</title>
      <link>https://piklist.github.io/Piklist-Documentation/faq/fields-not-saving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/faq/fields-not-saving/</guid>
      <description>The most common reason for fields not saving is because a post type uses the default WordPress “custom fields” meta box. This meta box actually duplicates the inputs used by your fields.
If you are registering a post type, make sure custom-fields is not in the “supports” array.
To remove the custom-fields meta box from a WordPress default post type, or one that is registered by another plugin, use remove_post_type_support().</description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/widgets/</guid>
      <description>/parts/widgets/ With Piklist you can easily create Widgets.
Widgets are made up of two files:
 Output file (This is the only required file) Form file (Not required)  Output file This is the only required file for widgets. Everything in this file will display on the frontend. It can be as simple as standard HTML or a MailChimp form. Or it can be pulled from the Forms File.</description>
    </item>
    
    <item>
      <title>Workflows</title>
      <link>https://piklist.github.io/Piklist-Documentation/file-structure/parts/workflows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/file-structure/parts/workflows/</guid>
      <description>/parts/workflows/ Piklist Workflows allow you to add a tabbed system on Post and User. Additionally, you can add almost anything you want to each tab.
You can create as many files as you like and place them in this folder. Each file will render one workflow tab.
View Tutorials &amp;rightarrow;</description>
    </item>
    
    <item>
      <title>Working with Field Relationships</title>
      <link>https://piklist.github.io/Piklist-Documentation/tutorials/relationships/working-with-field-relationships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/tutorials/relationships/working-with-field-relationships/</guid>
      <description>Piklist relationships allow you to relate any object to any object.
In this tutorial we&amp;rsquo;ll use the classic books example, assuming our post types are book and chapter, and a user can be an author.
Since we&amp;rsquo;re using Post Types, all this code goes in your /parts/meta-boxes/ folder.
First let&amp;rsquo;s add the chapter relate field to the book post type. Create a file and add this code:
/** * Title: Chapters * Post Type: book * Context: normal * Priority: high */ piklist(&#39;field&#39;, array( &#39;type&#39; =&amp;gt; &#39;select&#39; ,&#39;title&#39; =&amp;gt; &#39;Chapters&#39; ,&#39;choices&#39; =&amp;gt; piklist(get_posts(array( &#39;numberposts&#39; =&amp;gt; -1 ,&#39;post_type&#39; =&amp;gt; &#39;chapters&#39; )), array(&#39;ID&#39;, &#39;post_title&#39;)) ,&#39;relate&#39; =&amp;gt; array( &#39;scope&#39; =&amp;gt; &#39;post&#39; ) ,&#39;attributes&#39; =&amp;gt; array( &#39;class&#39; =&amp;gt; &#39;multiple&#39; ) ));  Create a second file in the same /parts/meta-boxes/ folder.</description>
    </item>
    
    <item>
      <title>Writing a plugin for Piklist</title>
      <link>https://piklist.github.io/Piklist-Documentation/getting-started/writing-a-plugin-for-piklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/getting-started/writing-a-plugin-for-piklist/</guid>
      <description>Writing a plugin to take advantage of Piklist is very simple. The only additional step is registering your plugin with Piklist, otherwise, this is just like writing a regular WordPress plugin. Like all plugins, Piklist plugins also live in your wp-content/plugins/ folder.
Registering your plugin with Piklist When writing WordPress plugins that rely on other plugins, you usually have to use hooks and filters… but not with Piklist. We’ve simplified the process for you.</description>
    </item>
    
    <item>
      <title>piklist_empty_post_title</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_empty_post_title/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_empty_post_title/</guid>
      <description>apply_filters(&#39;piklist_empty_post_title&#39;, $data[&#39;post_title&#39;], $post_array); Let’s you programmatically set the post title when adding a new post (post type).
Example:
// Set the Post Title to &amp;quot;Order #&amp;quot; plus post ID: function set_post_title_to_order_number($data, $post_array) { if ($post_array[&#39;post_type&#39;] == &#39;MY-POST-TYPE&#39;) { return &#39;Order #&#39; . $post_array[&#39;ID&#39;]; } else { return $data; } } add_filter(&#39;piklist_empty_post_title&#39;, &#39;set_post_title_to_order_number&#39;, 10, 2);  IMPORTANT: This filter works best when there is no title field for posts. To disable the title field, do not pass &amp;ldquo;title&amp;rdquo; to the supports parameter when registering a post type.</description>
    </item>
    
    <item>
      <title>piklist_part_process</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_part_process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_part_process/</guid>
      <description>apply_filters(&#39;piklist_part_process&#39;, $_part, $folder); The piklist_part_process filter is used to filter the parts (e.g. meta-boxes, settings, etc.) before they are saved. This allows you to modify or remove parts before they’re processed.
Parameters $part The individual part (e.g. meta-box, setting, etc.) to be modified or removed. It’s an associative array that contains all the information about the part.
 Input: Array  $folder The folder the part is stored in. If it’s a meta-box, then this would be “meta-boxes”.</description>
    </item>
    
    <item>
      <title>piklist_part_process-{$folder}</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_part_process_folder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_part_process_folder/</guid>
      <description>apply_filters(&amp;quot;piklist_part_process-{$folder}&amp;quot;, $_part); The piklist_part_process-{$folder} filter is used to filter the parts (e.g. meta-boxes, settings, etc.) before they are saved. This allows you to modify or remove parts before they’re processed.
Parameters $folder The parts folder you want to filter (e.g. meta-boxes, settings, etc.)
$part The individual part (e.g. meta-box, setting, etc.) to be modified or removed. It’s an associative array that contains all the information about the part.
 Input: Array  $folder The folder the part is stored in.</description>
    </item>
    
    <item>
      <title>piklist_post_types</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_post_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_post_types/</guid>
      <description>apply_filters(&#39;piklist_post_types&#39;, self::$post_types); The piklist_post_types filter lets you register your custom Post Types through Piklist. This gives you access to additional functionality that Piklist offers.
To register a Post Type with Piklist:
 Create a function with your Post Type parameters. Hook it to the piklist_post_types() filter.  This code goes in your theme&amp;rsquo;s functions.php file or your plugin file.
Parameters This filter supports every parameter that register_post_type() supports. Additionally, you may use the following Piklist specific parameters.</description>
    </item>
    
    <item>
      <title>piklist_pre_update_option</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_pre_update_option/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_pre_update_option/</guid>
      <description>apply_filters(&#39;piklist_pre_update_option&#39;, $settings, $setting, $new, $old); The piklist_pre_update_option filter is used to filter the settings input before they are saved. This allows you to manipulate the input data, or even add additional settings before the data is entered into the database.
Parameters This filter provides you with the following parameters:
$settings All key=&amp;gt;value pairs for this setting. If you are using multiple tabs, this will show all settings for all tabs.</description>
    </item>
    
    <item>
      <title>piklist_pre_update_option_$setting</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_pre_update_option_setting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_pre_update_option_setting/</guid>
      <description>apply_filters(&#39;piklist_pre_update_option_&#39; . $setting, $settings, $new, $old); The piklist_pre_update_option_$setting filter is used to filter the settings input before they are saved. This allows you to manipulate the input data, or even add additional settings before the data is entered into the database.
Parameters This filter provides you with the following parameters:
$settings All key=&amp;gt;value pairs for this setting. If you are using multiple tabs, this will show all settings for all tabs.</description>
    </item>
    
    <item>
      <title>piklist_sanitization_rules</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_sanitization_rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_sanitization_rules/</guid>
      <description> apply_filters(&#39;piklist_sanitization_rules&#39;, self::$sanitization_rules); Add your own rules to sanitize field data.
Example:
// create a sanitization rule called &amp;quot;my_email_sanitization&amp;quot; add_filter(&#39;piklist_sanitization_rules&#39;, &#39;sanitize_email_function&#39;, 11); function sanitize_email_function($sanitization_rules) { $sanitization_rules[&#39;my_email_sanitization&#39;] = array( &#39;callback&#39; =&amp;gt; &#39;sanitize_email_callback&#39; ); return $sanitization_rules; } function sanitize_email_callback($value, $field, $options) { return sanitize_email($value); // sanitize_email() is a core WordPress function }  Usage:
&#39;sanitize&#39; =&amp;gt; array( array( &#39;type&#39; =&amp;gt; &#39;my_email_sanitization&#39; ) )  </description>
    </item>
    
    <item>
      <title>piklist_taxonomies</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_taxonomies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_taxonomies/</guid>
      <description>apply_filters(&#39;piklist_taxonomies&#39;, self::$taxonomies); Extends the standard WordPress function register_taxonomy() with additional features and parameters.
Parameters piklist_taxonomies supports all parameters from register_taxonomy() as well as these custom parameters:
object_type Set this parameter to use this Piklist taxonomy for users
 Input: Array  Example:
&#39;object_type&#39; =&amp;gt; &#39;user
hide_meta_box Hide the meta box created by this taxonomy
 Input: Array  Example:
&amp;quot;hide_meta_box&amp;quot; =&amp;gt; true
meta_box_filter Add a filter to this meta box to make it easier to search for terms.</description>
    </item>
    
    <item>
      <title>piklist_validation_rules</title>
      <link>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_validation_rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://piklist.github.io/Piklist-Documentation/actions-filters/filters/piklist_validation_rules/</guid>
      <description>apply_filters(&#39;piklist_validation_rules&#39;, self::$validation_rules); Add your own rules to validate field data.
Example:
add_filter(&#39;piklist_validation_rules&#39;, &#39;check_valid_number&#39;, 11); function check_valid_number($validation_rules) { $validation_rules[&#39;my_number&#39;] = array( &#39;rule&#39; =&amp;gt; &amp;quot;/[-+]?[0-9]*[.,]?[0-9]+/&amp;quot; ,&#39;message&#39; =&amp;gt; __(&#39;is not a number&#39;) ); return $validation_rules; }  Usage:
&#39;validate&#39; =&amp;gt; array( array( &#39;type&#39; =&amp;gt; &#39;my_number&#39; ) )  Create a rule with a callback function:
// Create a validation rule called &amp;quot;my_file_exists&amp;quot; add_filter(&#39;piklist_validation_rules&#39;, &#39;check_file_exists&#39;, 11); function check_file_exists($validation_rules) { $validation_rules[&#39;my_file_exists&#39;] = array( &#39;callback&#39; =&amp;gt; &#39;my_validate_file_exists&#39; ); return $validation_rules; } /** * @param int $index The field index being checked.</description>
    </item>
    
  </channel>
</rss>